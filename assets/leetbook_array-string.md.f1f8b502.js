import{o as n,c as s,d as a}from"./app.08f538b2.js";const t='{"title":"数组和字符串","description":"","frontmatter":{},"headers":[{"level":2,"title":"数组简介","slug":"数组简介"},{"level":3,"title":"724-寻找数组的中心索引","slug":"_724-寻找数组的中心索引"},{"level":3,"title":"35-搜索插入位置","slug":"_35-搜索插入位置"},{"level":3,"title":"03-56-合并区间","slug":"_03-56-合并区间"},{"level":2,"title":"二维数组简介","slug":"二维数组简介"},{"level":3,"title":"48-旋转数组","slug":"_48-旋转数组"},{"level":3,"title":"面试题-08-零矩阵","slug":"面试题-08-零矩阵"},{"level":3,"title":"498-对角线遍历","slug":"_498-对角线遍历"},{"level":2,"title":"字符串简介","slug":"字符串简介"},{"level":3,"title":"14. 最长公共前缀","slug":"_14-最长公共前缀"},{"level":3,"title":"5. 最长回文子串","slug":"_5-最长回文子串"},{"level":3,"title":"剑指 Offer 58 - I. 翻转单词顺序","slug":"剑指-offer-58-i-翻转单词顺序"},{"level":3,"title":"28. 实现 strStr()","slug":"_28-实现-strstr"},{"level":2,"title":"双指针法","slug":"双指针法"},{"level":3,"title":"344. 反转字符串","slug":"_344-反转字符串"},{"level":3,"title":"561. 数组拆分 I","slug":"_561-数组拆分-i"},{"level":3,"title":"167. 两数之和 II - 输入有序数组","slug":"_167-两数之和-ii-输入有序数组"},{"level":3,"title":"27. 移除元素","slug":"_27-移除元素"},{"level":3,"title":"485. 最大连续 1 的个数","slug":"_485-最大连续-1-的个数"},{"level":3,"title":"209. 长度最小的子数组","slug":"_209-长度最小的子数组"},{"level":2,"title":"小结","slug":"小结"},{"level":3,"title":"118. 杨辉三角","slug":"_118-杨辉三角"},{"level":3,"title":"119. 杨辉三角 II","slug":"_119-杨辉三角-ii"},{"level":3,"title":"557. 反转字符串中的单词 III","slug":"_557-反转字符串中的单词-iii"},{"level":3,"title":"153. 寻找旋转排序数组中的最小值","slug":"_153-寻找旋转排序数组中的最小值"},{"level":3,"title":"26. 删除有序数组中的重复项","slug":"_26-删除有序数组中的重复项"},{"level":3,"title":"283. 移动零","slug":"_283-移动零"}],"relativePath":"leetbook/array-string.md","lastUpdated":1646561851202}',p={},o=a('<h1 id="数组和字符串"><a class="header-anchor" href="#数组和字符串" aria-hidden="true">#</a> 数组和字符串</h1><h2 id="数组简介"><a class="header-anchor" href="#数组简介" aria-hidden="true">#</a> 数组简介</h2><h3 id="_724-寻找数组的中心索引"><a class="header-anchor" href="#_724-寻找数组的中心索引" aria-hidden="true">#</a> 724-寻找数组的中心索引</h3><p>难度简单</p><p>给你一个整数数组 <code>nums</code>，请编写一个能够返回数组 <strong>“中心下标”</strong> 的方法。</p><p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果数组不存在中心下标，返回 <code>-1</code> 。如果数组有多个中心下标，应该返回最靠近左边的那一个。</p><p><strong>注意：</strong> 中心下标可能出现在数组的两端。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：nums = [1, 7, 3, 6, 5, 6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 (1 + 7 + 3 = 11)，\n右侧数之和 (5 + 6 = 11) ，二者相等。\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：nums = [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：nums = [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n下标 0 左侧不存在元素，视作和为 0 ；\n右侧数之和为 1 + (-1) = 0 ，二者相等。\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>nums</code> 的长度范围为 <code>[0, 10000]</code>。</li><li>任何一个 <code>nums[i]</code> 将会是一个范围在 <code>[-1000, 1000]</code>的整数。</li></ul><hr><ul><li>题解： <a href="https://leetcode-cn.com/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/</a></li><li>方法：前缀和方法</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">pivotIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 前缀和方法 https://leetcode-cn.com/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/</span>\n    <span class="token comment">// 假设 左侧和为 sum，nums 总和为 total, 则右侧 sum = total - sum - nums[i]，推倒公式：2 * sum + nums[i] === total</span>\n    <span class="token comment">// 已知 num[i], total, 求 sum ?</span>\n    <span class="token comment">// sum 为动态的，所以在 for 循环中累加即可</span>\n\n    <span class="token keyword">const</span> total <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> i\n        <span class="token punctuation">}</span>\n        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><hr><ul><li>方法2：时间复杂度比较高</li></ul><p>一开始我的方法比较粗暴，每次循环求 左右两侧判断相等得到 index</p><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">pivotIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> <span class="token function-variable function">getTotal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        left <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n        right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getTotal</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">getTotal</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            index <span class="token operator">=</span> i\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> index\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_35-搜索插入位置"><a class="header-anchor" href="#_35-搜索插入位置" aria-hidden="true">#</a> 35-搜索插入位置</h3><p>难度简单</p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p><strong>示例 1:</strong></p><div class="language-"><pre><code>输入: [1,3,5,6], 5\n输出: 2\n</code></pre></div><p><strong>示例 2:</strong></p><div class="language-"><pre><code>输入: [1,3,5,6], 2\n输出: 1\n</code></pre></div><p><strong>示例 3:</strong></p><div class="language-"><pre><code>输入: [1,3,5,6], 7\n输出: 4\n</code></pre></div><p><strong>示例 4:</strong></p><div class="language-"><pre><code>输入: [1,3,5,6], 0\n输出: 0\n</code></pre></div><hr><ul><li>题解：<a href="https://leetcode-cn.com/problems/search-insert-position/solution/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/search-insert-position/solution/</a></li><li>方法：二分法</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">searchInsert</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nums <span class="token operator">||</span> <span class="token operator">!</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 先用 二分法做</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            r <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 二分法没找到，说明不存在，那么此时 左指针和右指针中间，就是 target 该插入的位置，因为 l = mid + 1，所以直接取 l</span>\n    <span class="token keyword">return</span> l\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_03-56-合并区间"><a class="header-anchor" href="#_03-56-合并区间" aria-hidden="true">#</a> 03-56-合并区间</h3><p>难度中等</p><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：intervals = [[1,3],[2,6],[8,10],[15,18]]\n输出：[[1,6],[8,10],[15,18]]\n解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：intervals = [[1,4],[4,5]]\n输出：[[1,5]]\n解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 104</code></li><li><code>intervals[i].length == 2</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= 104</code></li></ul><hr><ul><li>题解： <ul><li>题解1：<a href="https://leetcode-cn.com/problems/merge-intervals/solution/merge-intervals-by-ikaruga/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/merge-intervals/solution/merge-intervals-by-ikaruga/</a></li><li>题解2：<a href="https://leetcode-cn.com/problems/merge-intervals/solution/chi-jing-ran-yi-yan-miao-dong-by-sweetiee/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/merge-intervals/solution/chi-jing-ran-yi-yan-miao-dong-by-sweetiee/</a></li></ul></li><li>方法：排序 + 双指针</li><li>代码：</li></ul><div class="language-js"><pre><code>\n<span class="token comment">/**\n * @param {number[][]} intervals\n * @return {number[][]}\n * 思路：排序 + 双指针\n * 参考题解：https://leetcode-cn.com/problems/merge-intervals/solution/merge-intervals-by-ikaruga/\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">intervals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 排序</span>\n    intervals <span class="token operator">=</span> intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前元组的第二个值（尾巴）</span>\n        <span class="token keyword">let</span> t <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token comment">// 下一个元组</span>\n        <span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token comment">// 下一个元组的第一个值比当前元组的第二个值小（尾巴比下一个头小），说明需要合并</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> intervals<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            t <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            j <span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        i <span class="token operator">=</span> j\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> ans\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="二维数组简介"><a class="header-anchor" href="#二维数组简介" aria-hidden="true">#</a> 二维数组简介</h2><h3 id="_48-旋转数组"><a class="header-anchor" href="#_48-旋转数组" aria-hidden="true">#</a> 48-旋转数组</h3><ul><li><a href="https://leetcode-cn.com/problems/rotate-matrix-lcci/" target="_blank" rel="noopener noreferrer">面试题 01.07. 旋转矩阵</a></li></ul><p>难度中等</p><p>给你一幅由 <code>N × N</code> 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。</p><p>不占用额外内存空间能否做到？</p><p><strong>示例 1:</strong></p><div class="language-"><pre><code>给定 matrix = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n原地旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n</code></pre></div><p><strong>示例 2:</strong></p><div class="language-"><pre><code>给定 matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n原地旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n</code></pre></div><p><strong>注意</strong>：本题与主站 48 题相同：<a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/rotate-image/</a></p><hr><ul><li>题解：<a href="https://leetcode-cn.com/problems/rotate-matrix-lcci/solution/xuan-zhuan-ju-zhen-by-leetcode-solution/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/rotate-matrix-lcci/solution/xuan-zhuan-ju-zhen-by-leetcode-solution/</a></li><li>方法： <ul><li>直接使用辅助数组，总结公式置换</li><li>先水平翻转，然后对角线翻转</li></ul></li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n * 参考：https://leetcode-cn.com/problems/rotate-matrix-lcci/solution/xuan-zhuan-ju-zhen-by-leetcode-solution/\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">rotate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> matrixArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            matrixArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrixArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> matrix\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="面试题-08-零矩阵"><a class="header-anchor" href="#面试题-08-零矩阵" aria-hidden="true">#</a> 面试题-08-零矩阵</h3><p><a href="https://leetcode-cn.com/problems/zero-matrix-lcci/" target="_blank" rel="noopener noreferrer">面试题 01.08. 零矩阵</a></p><p>难度中等</p><p>编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：\n[\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\n输出：\n[\n  [1,0,1],\n  [0,0,0],\n  [1,0,1]\n]\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：\n[\n  [0,1,2,0],\n  [3,4,5,2],\n  [1,3,1,5]\n]\n输出：\n[\n  [0,0,0,0],\n  [0,4,5,0],\n  [0,3,1,0]\n]\n</code></pre></div><hr><ul><li>题解：<a href="https://leetcode-cn.com/problems/zero-matrix-lcci/solution/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/zero-matrix-lcci/solution/</a></li><li>方法：各种循环</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">setZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> x <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length\n    <span class="token keyword">const</span> y <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n    <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">clear</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        matrix<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> matrix\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_498-对角线遍历"><a class="header-anchor" href="#_498-对角线遍历" aria-hidden="true">#</a> 498-对角线遍历</h3><p><a href="https://leetcode-cn.com/problems/diagonal-traverse/" target="_blank" rel="noopener noreferrer">498. 对角线遍历</a></p><p>难度中等</p><p>给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。</p><p><strong>示例:</strong></p><div class="language-"><pre><code>输入:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n输出:  [1,2,4,7,5,3,6,8,9]\n\n解释:\n</code></pre></div><p><strong>说明:</strong></p><ol><li>给定矩阵中的元素总数不会超过 100000 。</li></ol><hr><ul><li>题解：<a href="https://leetcode-cn.com/problems/diagonal-traverse/solution/xiao-bai-kan-guo-lai-zui-zhi-bai-yi-li-jie-ban-ben/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/diagonal-traverse/solution/xiao-bai-kan-guo-lai-zui-zhi-bai-yi-li-jie-ban-ben/</a></li><li>方法：需要总结几个公式 <ul><li>遍历总次数：行数 + 列数 -1</li><li>遍历方向：通过每次遍历的次数 取 的2 余数 判断遍历的方向</li><li>边界情况</li></ul></li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[][]} mat\n * @return {number[]}\n * \n * 题解：https://leetcode-cn.com/problems/diagonal-traverse/solution/xiao-bai-kan-guo-lai-zui-zhi-bai-yi-li-jie-ban-ben/\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">findDiagonalOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mat<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token comment">// n 表示它需要遍历的次数，关系为：遍历次数 = 行 + 列 -1</span>\n    <span class="token keyword">let</span> row <span class="token operator">=</span> mat<span class="token punctuation">.</span>length<span class="token punctuation">,</span> col <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> row <span class="token operator">+</span> col <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 向左下方遍历</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                x<span class="token operator">--</span>\n                y<span class="token operator">++</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 越界情况</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                x <span class="token operator">++</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                x <span class="token operator">+=</span> <span class="token number">2</span>\n                y <span class="token operator">--</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 向右上方遍历</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span> x <span class="token operator">&lt;</span> row <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                x <span class="token operator">++</span>\n                y <span class="token operator">--</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 越界情况</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                y <span class="token operator">++</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                x<span class="token operator">--</span>\n                y <span class="token operator">+=</span> <span class="token number">2</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="字符串简介"><a class="header-anchor" href="#字符串简介" aria-hidden="true">#</a> 字符串简介</h2><h3 id="_14-最长公共前缀"><a class="header-anchor" href="#_14-最长公共前缀" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener noreferrer">14. 最长公共前缀</a></h3><p>难度简单</p><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n输出：&quot;fl&quot;\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n输出：&quot;&quot;\n解释：输入不存在公共前缀。\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string[]} strs\n * @return {string}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">longestCommonPrefix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> strsCopy <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token comment">// 拿到最短的字符串</span>\n  <span class="token keyword">const</span> firstItem <span class="token operator">=</span> strsCopy<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  \n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> firstItem<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> str <span class="token operator">=</span> firstItem<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> flag <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> result <span class="token operator">=</span> str\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n  \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre></div><h3 id="_5-最长回文子串"><a class="header-anchor" href="#_5-最长回文子串" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">5. 最长回文子串</a></h3><p>难度中等</p><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：s = &quot;babad&quot;\n输出：&quot;bab&quot;\n解释：&quot;aba&quot; 同样是符合题意的答案。\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：s = &quot;cbbd&quot;\n输出：&quot;bb&quot;\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：s = &quot;a&quot;\n输出：&quot;a&quot;\n</code></pre></div><p><strong>示例 4：</strong></p><div class="language-"><pre><code>输入：s = &quot;ac&quot;\n输出：&quot;a&quot;\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @return {string}\n * 做题思想：使用对称性 的方法解题，主要考虑 2 种情况\n * 情况1：&quot;aba&quot; 返回最大回文子串为 &quot;aba&quot;\n * 情况2：&quot;aa&quot; 以 2 个 a 中间的位置为中心，两个 a 都是对称的\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> s\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 这里 maxLength 设置为 1 是因为 这种情况 [a, b] 输出的 最长子串 是 &quot;a&quot; 而不是 &quot;&quot;</span>\n  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">expandCenterAround</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 为什么是 right - left + 1，因为 &quot;aba&quot; 的right为2，left为0，差值是2，实际长度应该为3</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         maxLength <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>\n         start <span class="token operator">=</span> left\n      <span class="token punctuation">}</span>\n      left <span class="token operator">--</span>\n      right <span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> m<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 考虑情况1</span>\n    <span class="token function">expandCenterAround</span><span class="token punctuation">(</span>m <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token comment">// 考虑情况2</span>\n    <span class="token function">expandCenterAround</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> maxLength<span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre></div><h3 id="剑指-offer-58-i-翻转单词顺序"><a class="header-anchor" href="#剑指-offer-58-i-翻转单词顺序" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/" target="_blank" rel="noopener noreferrer">剑指 Offer 58 - I. 翻转单词顺序</a></h3><p>难度简单</p><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串&quot;I am a student. &quot;，则输出&quot;student. a am I&quot;。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入: &quot;the sky is blue&quot;\n输出: &quot;blue is sky the&quot;\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入: &quot;  hello world!  &quot;\n输出: &quot;world! hello&quot;\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入: &quot;a good   example&quot;\n输出: &quot;example good a&quot;\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n</code></pre></div><p><strong>说明：</strong></p><ul><li>无空格字符构成一个单词。</li><li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li><li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li></ul><p>**注意：**本题与主站 151 题相同：<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/reverse-words-in-a-string/</a></p><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @return {string}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseWords</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> ss<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> i <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_28-实现-strstr"><a class="header-anchor" href="#_28-实现-strstr" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener noreferrer">28. 实现 strStr()</a></h3><p>难度简单</p><p>实现 <a href="https://baike.baidu.com/item/strstr/811469" target="_blank" rel="noopener noreferrer">strStr()</a> 函数。</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 <code>-1</code> 。</p><p><strong>说明：</strong></p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与 C 语言的 <a href="https://baike.baidu.com/item/strstr/811469" target="_blank" rel="noopener noreferrer">strstr()</a> 以及 Java 的 <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)" target="_blank" rel="noopener noreferrer">indexOf()</a> 定义相符。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：haystack = &quot;hello&quot;, needle = &quot;ll&quot;\n输出：2\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;\n输出：-1\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：haystack = &quot;&quot;, needle = &quot;&quot;\n输出：0\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= haystack.length, needle.length &lt;= 5 * 104</code></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n * 题解：https://leetcode-cn.com/problems/implement-strstr/solution/shua-chuan-lc-shuang-bai-po-su-jie-fa-km-tb86/\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">strStr</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">haystack<span class="token punctuation">,</span> needle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hLen <span class="token operator">=</span> haystack<span class="token punctuation">.</span>length<span class="token punctuation">,</span> nLen <span class="token operator">=</span> needle<span class="token punctuation">.</span>length\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> hLen <span class="token operator">-</span> nLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 每一次都从原串的发起点和匹配串的首位开始，尝试匹配</span>\n        <span class="token keyword">let</span> a <span class="token operator">=</span> i<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> nLen <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">===</span> needle<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            a <span class="token operator">++</span>\n            b <span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 若能完全匹配，返回原串的 起始点 下标</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> nLen<span class="token punctuation">)</span> <span class="token keyword">return</span> i\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="双指针法"><a class="header-anchor" href="#双指针法" aria-hidden="true">#</a> 双指针法</h2><h3 id="_344-反转字符串"><a class="header-anchor" href="#_344-反转字符串" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener noreferrer">344. 反转字符串</a></h3><p>难度简单</p><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">原地</a>修改输入数组**、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 <a href="https://baike.baidu.com/item/ASCII" target="_blank" rel="noopener noreferrer">ASCII</a> 码表中的可打印字符。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]\n输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]\n输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]\n</code></pre></div><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>j<span class="token punctuation">,</span> nums</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> s<span class="token punctuation">)</span>\n       i <span class="token operator">++</span>\n       j <span class="token operator">--</span> \n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> s\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_561-数组拆分-i"><a class="header-anchor" href="#_561-数组拆分-i" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/array-partition-i/" target="_blank" rel="noopener noreferrer">561. 数组拆分 I</a></h3><p>难度简单</p><p>给定长度为 <code>2n</code> 的整数数组 <code>nums</code> ，你的任务是将这些数分成 <code>n</code> 对, 例如 <code>(a1, b1), (a2, b2), ..., (an, bn)</code> ，使得从 <code>1</code> 到 <code>n</code> 的 <code>min(ai, bi)</code> 总和最大。</p><p>返回该 <strong>最大总和</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：nums = [1,4,3,2]\n输出：4\n解释：所有可能的分法（忽略元素顺序）为：\n1. (1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4\n所以最大总和为 4\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：nums = [6,2,6,5,1,2]\n输出：9\n解释：最优的分法为 (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li><li><code>nums.length == 2 * n</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">arrayPairSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> curr<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> total <span class="token operator">+</span> curr <span class="token operator">:</span> total\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_167-两数之和-ii-输入有序数组"><a class="header-anchor" href="#_167-两数之和-ii-输入有序数组" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener noreferrer">167. 两数之和 II - 输入有序数组</a></h3><p>难度简单</p><p>给定一个已按照 <strong>升序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p><p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值*。*<code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p><p>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：numbers = [2,7,11,15], target = 9\n输出：[1,2]\n解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：numbers = [2,3,4], target = 6\n输出：[1,3]\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：numbers = [-1,0], target = -1\n输出：[1,2]\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>递增顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li>仅存在一个有效答案</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">numbers<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            l <span class="token operator">++</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            r<span class="token operator">--</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">,</span> <span class="token operator">++</span>r<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_27-移除元素"><a class="header-anchor" href="#_27-移除元素" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener noreferrer">27. 移除元素</a></h3><p>难度简单</p><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><div class="language-"><pre><code>// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len = removeElement(nums, val);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n    print(nums[i]);\n}\n</code></pre></div><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">removeElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> j\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_485-最大连续-1-的个数"><a class="header-anchor" href="#_485-最大连续-1-的个数" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/max-consecutive-ones/" target="_blank" rel="noopener noreferrer">485. 最大连续 1 的个数</a></h3><p>难度简单</p><p>给定一个二进制数组， 计算其中最大连续 1 的个数。</p><p><strong>示例：</strong></p><div class="language-"><pre><code>输入：[1,1,0,1,1,1]\n输出：3\n解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.\n</code></pre></div><p><strong>提示：</strong></p><ul><li>输入的数组只包含 <code>0</code> 和 <code>1</code> 。</li><li>输入数组的长度是正整数，且不超过 10,000。</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">findMaxConsecutiveOnes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      count <span class="token operator">++</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> count<span class="token punctuation">)</span>\n      count <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> count<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_209-长度最小的子数组"><a class="header-anchor" href="#_209-长度最小的子数组" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener noreferrer">209. 长度最小的子数组</a></h3><p>难度中等</p><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度**。**如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：target = 4, nums = [1,4,4]\n输出：1\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：target = 11, nums = [1,1,1,1,1,1,1,1]\n输出：0\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">minSubArrayLen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n        j <span class="token operator">++</span>\n\n        <span class="token keyword">while</span><span class="token punctuation">(</span>total <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span>\n            total <span class="token operator">=</span> total <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n            i <span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="小结"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><h3 id="_118-杨辉三角"><a class="header-anchor" href="#_118-杨辉三角" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener noreferrer">118. 杨辉三角</a></h3><p>难度简单</p><p>给定一个非负整数 *numRows，*生成杨辉三角的前 <em>numRows</em> 行。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="img"></p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p><strong>示例:</strong></p><div class="language-"><pre><code>输入: 5\n输出:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n</code></pre></div><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number} numRows\n * @return {number[][]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">generate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">numRows</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> upLeft <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span>\n                <span class="token keyword">const</span> upRight <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span>\n                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>upLeft <span class="token operator">+</span> upRight<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_119-杨辉三角-ii"><a class="header-anchor" href="#_119-杨辉三角-ii" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/pascals-triangle-ii/" target="_blank" rel="noopener noreferrer">119. 杨辉三角 II</a></h3><p>难度简单</p><p>给定一个非负索引 <em>k</em>，其中 <em>k</em> ≤ 33，返回杨辉三角的第 <em>k</em> 行。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="img"></p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p><strong>示例:</strong></p><div class="language-"><pre><code>输入: 3\n输出: [1,3,3,1]\n</code></pre></div><p><strong>进阶：</strong></p><p>你可以优化你的算法到 <em>O</em>(<em>k</em>) 空间复杂度吗？</p><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number} rowIndex\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getRow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">rowIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> upLeft <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span>\n                <span class="token keyword">const</span> upRight <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span>\n                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>upLeft <span class="token operator">+</span> upRight<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_557-反转字符串中的单词-iii"><a class="header-anchor" href="#_557-反转字符串中的单词-iii" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/" target="_blank" rel="noopener noreferrer">557. 反转字符串中的单词 III</a></h3><p>难度简单</p><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p><strong>示例：</strong></p><div class="language-"><pre><code>输入：&quot;Let&#39;s take LeetCode contest&quot;\n输出：&quot;s&#39;teL ekat edoCteeL tsetnoc&quot;\n</code></pre></div><p><strong><em>*</em>***提示：*****</strong>*</p><ul><li>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @return {string}\n * 题解：https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/solution/fan-zhuan-zi-fu-chuan-zhong-de-dan-ci-iii-by-lee-2/\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseWords</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_153-寻找旋转排序数组中的最小值"><a class="header-anchor" href="#_153-寻找旋转排序数组中的最小值" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener noreferrer">153. 寻找旋转排序数组中的最小值</a></h3><p>难度中等</p><p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：</p><ul><li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li><li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li></ul><p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p><p>给你一个元素值 <strong>互不相同</strong> 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：nums = [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：nums = [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：nums = [11,13,15,17]\n输出：11\n解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li><li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">findMin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length\n\n    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span><span class="token number">1</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len <span class="token operator">?</span> nums<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_26-删除有序数组中的重复项"><a class="header-anchor" href="#_26-删除有序数组中的重复项" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener noreferrer">26. 删除有序数组中的重复项</a></h3><p>难度简单</p><p>给你一个有序数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><div class="language-"><pre><code>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n    print(nums[i]);\n}\n</code></pre></div><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：nums = [1,1,2]\n输出：2, nums = [1,2]\n解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：nums = [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums = [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按升序排列</li></ul><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            nums<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_283-移动零"><a class="header-anchor" href="#_283-移动零" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener noreferrer">283. 移动零</a></h3><p>难度简单</p><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>示例:</strong></p><div class="language-"><pre><code>输入: [0,1,0,3,12]\n输出: [1,3,12,0,0]\n</code></pre></div><p><strong>说明</strong>:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><hr><ul><li>题解：</li><li>方法：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n            j <span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n        j <span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> nums\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',315);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
