import{o as n,c as s,a}from"./app.7a265b72.js";const p='{"title":"链表","description":"","frontmatter":{},"headers":[{"level":2,"title":"单链表","slug":"单链表"},{"level":2,"title":"双指针技巧","slug":"双指针技巧"},{"level":3,"title":"环形链表","slug":"环形链表"},{"level":3,"title":"环形链表2","slug":"环形链表2"},{"level":3,"title":"相交链表","slug":"相交链表"},{"level":3,"title":"删除链表的倒数第N个节点","slug":"删除链表的倒数第n个节点"},{"level":2,"title":"经典问题","slug":"经典问题"},{"level":3,"title":"反转链表","slug":"反转链表"},{"level":3,"title":"移除链表元素","slug":"移除链表元素"},{"level":3,"title":"奇偶链表","slug":"奇偶链表"},{"level":3,"title":"回文链表","slug":"回文链表"},{"level":2,"title":"双链表","slug":"双链表"},{"level":2,"title":"小结","slug":"小结"},{"level":3,"title":"合并两个有序链表","slug":"合并两个有序链表"},{"level":3,"title":"两数相加","slug":"两数相加"},{"level":3,"title":"旋转链表","slug":"旋转链表"}],"relativePath":"leetbook/linked-list.md","lastUpdated":1634266498202}',t={},e=a('<h1 id="链表"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h1><blockquote><p><a href="https://leetcode-cn.com/leetbook/detail/linked-list/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/leetbook/detail/linked-list/</a></p></blockquote><h2 id="单链表"><a class="header-anchor" href="#单链表" aria-hidden="true">#</a> 单链表</h2><p>链表基础知识：</p><ul><li>基础定义</li><li>添加</li><li>删除</li></ul><h2 id="双指针技巧"><a class="header-anchor" href="#双指针技巧" aria-hidden="true">#</a> 双指针技巧</h2><p>链表中的双指针技巧</p><ol><li>如果没有环，快指针将停在链表的末尾。</li><li>如果有环，快指针最终将与慢指针相遇。</li></ol><h3 id="环形链表"><a class="header-anchor" href="#环形链表" aria-hidden="true">#</a> 环形链表</h3><p>给定一个链表，<strong>判断链表中是否有环</strong>。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><p>输入：head = [3,2,0,-4], pos = 1 输出：true 解释：链表中有一个环，其尾部连接到第二个节点。</p><p>示例 2：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><p>输入：head = [1,2], pos = 0 输出：true 解释：链表中有一个环，其尾部连接到第一个节点。</p><p>示例 3：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><p>输入：head = [1], pos = -1 输出：false 解释：链表中没有环。</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @return {boolean}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token keyword">let</span> slow <span class="token operator">=</span> head\n    <span class="token keyword">let</span> fast <span class="token operator">=</span> head\n    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next\n        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="环形链表2"><a class="header-anchor" href="#环形链表2" aria-hidden="true">#</a> 环形链表2</h3><p>给定一个链表，<strong>返回链表开始入环的第一个节点</strong>。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p><p>进阶：</p><p>你是否可以使用 O(1) 空间解决此题？</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><p>输入：head = [3,2,0,-4], pos = 1 输出：返回索引为 1 的链表节点 解释：链表中有一个环，其尾部连接到第二个节点。 示例 2：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><p>输入：head = [1,2], pos = 0 输出：返回索引为 0 的链表节点 解释：链表中有一个环，其尾部连接到第一个节点。 示例 3：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><p>输入：head = [1], pos = -1 输出：返回 null 解释：链表中没有环。</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n\n<span class="token comment">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>\n    <span class="token keyword">let</span> slow <span class="token operator">=</span> head\n    <span class="token keyword">let</span> fast <span class="token operator">=</span> head\n    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next\n        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> slow<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="相交链表"><a class="header-anchor" href="#相交链表" aria-hidden="true">#</a> 相交链表</h3><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p><p>图示两个链表在节点 c1 开始相交：</p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" target="_blank" rel="noopener noreferrer"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></a></p><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 保持其原始结构 。</p><p>示例 1：</p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" target="_blank" rel="noopener noreferrer"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></a></p><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 输出：Intersected at &#39;8&#39; 解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。 在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 示例 2：</p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" target="_blank" rel="noopener noreferrer"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png" alt="img"></a></p><p>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 输出：Intersected at &#39;2&#39; 解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。 在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 示例 3：</p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png" target="_blank" rel="noopener noreferrer"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png" alt="img"></a></p><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 输出：null 解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。 由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。 这两个链表不相交，因此返回 null 。</p><p>提示：</p><p>listA 中节点数目为 m listB 中节点数目为 n 0 &lt;= m, n &lt;= 3 * 104 1 &lt;= Node.val &lt;= 105 0 &lt;= skipA &lt;= m 0 &lt;= skipB &lt;= n 如果 listA 和 listB 没有交点，intersectVal 为 0 如果 listA 和 listB 有交点，intersectVal == listA[skipA + 1] == listB[skipB + 1]</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n\n<span class="token comment">/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>headA <span class="token operator">||</span> <span class="token operator">!</span>headB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>\n\n    <span class="token comment">/**\n    定义两个指针, 第一轮让两个到达末尾的节点指向另一个链表的头部, 最后如果相遇则为交点(在第一轮移动中恰好抹除了长度差)\n    两个指针等于移动了相同的距离, 有交点就返回, 无交点就是各走了两条指针的长度\n    **/</span>\n    <span class="token keyword">let</span> pa <span class="token operator">=</span> headA<span class="token punctuation">,</span> pb <span class="token operator">=</span> headB\n    <span class="token comment">// 在这里第一轮体现在pA和pB第一次到达尾部会移向另一链表的表头, 而第二轮体现在如果pA或pB相交就返回交点, 不相交最后就是null==null</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>pa <span class="token operator">!==</span> pb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pa <span class="token operator">=</span> pa <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headB <span class="token operator">:</span> pa<span class="token punctuation">.</span>next\n        pb <span class="token operator">=</span> pb <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headA <span class="token operator">:</span> pb<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> pa\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="删除链表的倒数第n个节点"><a class="header-anchor" href="#删除链表的倒数第n个节点" aria-hidden="true">#</a> 删除链表的倒数第N个节点</h3><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>进阶：你能尝试使用一趟扫描实现吗？</p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p><p>输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5] 示例 2：</p><p>输入：head = [1], n = 1 输出：[] 示例 3：</p><p>输入：head = [1,2], n = 1 输出：[1]</p><p>提示：</p><p>链表中结点的数目为 sz 1 &lt;= sz &lt;= 30 0 &lt;= Node.val &lt;= 100 1 &lt;= n &lt;= sz</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">removeNthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head\n\n    <span class="token keyword">let</span> n1 <span class="token operator">=</span> dummy\n    <span class="token keyword">let</span> n2 <span class="token operator">=</span> dummy\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      n2 <span class="token operator">=</span> n2<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">while</span><span class="token punctuation">(</span>n2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      n1 <span class="token operator">=</span> n1<span class="token punctuation">.</span>next\n      n2 <span class="token operator">=</span> n2<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span>\n\n    n1<span class="token punctuation">.</span>next <span class="token operator">=</span> n1<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next\n    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next\n\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>相似题：</p><ul><li><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener noreferrer">剑指 Offer 22. 链表中倒数第k个节点</a></li></ul><p>难度简单284收藏分享切换为英文接收动态反馈</p><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p><p><strong>示例：</strong></p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</p><p>返回链表 4-&gt;5.</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */</span>\n<span class="token comment">// 思路：快慢指针，定义一个计数器，fast 指针先开始移动，当计数器走过 k 个数后，slow 指针开始移动，当 fast 指针结束，slow 指针指向的即是倒数第 k 个数</span>\n<span class="token comment">// 我的理解：倒数第 k 个数，本质上就是 (length - 顺序第 k 个数)</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getKthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> fast <span class="token operator">=</span> head\n    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next\n        <span class="token punctuation">}</span>\n        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next\n        n <span class="token operator">+=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> slow\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>小结：</strong></p><p>它与我们在数组中学到的内容类似。但它可能更棘手而且更容易出错。你应该注意以下几点：</p><ol><li>在调用 next 字段之前，始终检查节点是否为空。</li></ol><p>获取空节点的下一个节点将导致空指针错误。例如，在我们运行 fast = fast.next.next 之前，需要检查 fast 和 fast.next 不为空。</p><ol start="2"><li>仔细定义循环的结束条件。</li></ol><h2 id="经典问题"><a class="header-anchor" href="#经典问题" aria-hidden="true">#</a> 经典问题</h2><h3 id="反转链表"><a class="header-anchor" href="#反转链表" aria-hidden="true">#</a> 反转链表</h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><div class="language-"><pre><code>输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n</code></pre></div><p>示例 2：</p><div class="language-"><pre><code>输入：head = [1,2]\n输出：[2,1]\n</code></pre></div><p>示例 3：</p><div class="language-"><pre><code>输入：head = []\n输出：[]\n</code></pre></div><p>提示：</p><p>链表中节点的数目范围是 [0, 5000] -5000 &lt;= Node.val &lt;= 5000</p><p>进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 结束条件 节点为空，或者节点为最后一个链表节点，返回上一层 head</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head\n\n    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>\n\n    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head\n    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>\n    \n    <span class="token keyword">return</span> p\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// 法2</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head\n  <span class="token comment">//dummy-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> dnext <span class="token operator">=</span> dummy<span class="token punctuation">.</span>next\n    <span class="token keyword">let</span> hnext <span class="token operator">=</span> head<span class="token punctuation">.</span>next\n    <span class="token comment">// 暂存 2</span>\n    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> hnext\n    <span class="token comment">// 1-&gt;2 ==&gt; 1-&gt;3</span>\n    head<span class="token punctuation">.</span>next <span class="token operator">=</span> hnext<span class="token punctuation">.</span>next\n    <span class="token comment">// 2-&gt;3 ==&gt; 2-&gt; dummy 即 2-&gt;1</span>\n    hnext<span class="token punctuation">.</span>next <span class="token operator">=</span> dnext\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>相关题：部分反转</p><ul><li><h4 id="反转链表-ii"><a class="header-anchor" href="#反转链表-ii" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/" target="_blank" rel="noopener noreferrer">反转链表 II</a></h4></li></ul><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><p>示例 1：</p><div class="language-"><pre><code>输入：head = [1,2,3,4,5], left = 2, right = 4\n输出：[1,4,3,2,5]\n</code></pre></div><p>示例 2：</p><div class="language-"><pre><code>输入：head = [5], left = 1, right = 1\n输出：[5]\n</code></pre></div><p>提示：</p><p>链表中节点数目为 n 1 &lt;= n &lt;= 500 -500 &lt;= Node.val &lt;= 500 1 &lt;= left &lt;= right &lt;= n</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">// 链接：https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">reverseBetween</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 设置 dummyNode 是这一类问题的一般做法</span>\n    <span class="token keyword">const</span> dummy_node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dummy_node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> pre <span class="token operator">=</span> dummy_node<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">let</span> cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        next<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> dummy_node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre></div><h3 id="移除链表元素"><a class="header-anchor" href="#移除链表元素" aria-hidden="true">#</a> 移除链表元素</h3><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p>示例 1：</p><div class="language-"><pre><code>输入：head = [1,2,6,3,4,5,6], val = 6\n输出：[1,2,3,4,5]\n</code></pre></div><p>示例 2：</p><div class="language-"><pre><code>输入：head = [], val = 1\n输出：[]\n</code></pre></div><p>示例 3：</p><div class="language-"><pre><code>输入：head = [7,7,7,7], val = 7\n输出：[]\n</code></pre></div><p>提示：</p><p>列表中的节点数目在范围 [0, 104] 内 1 &lt;= Node.val &lt;= 50 0 &lt;= val &lt;= 50</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">removeElements</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 临时节点，记录头结点，一直不变</span>\n  <span class="token keyword">let</span> previous <span class="token operator">=</span> dummy<span class="token comment">// 跟随节点：记录 head 前一个节点，每次变化</span>\n  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head\n\n  <span class="token keyword">while</span><span class="token punctuation">(</span> head <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 删除目标元素</span>\n      previous<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next\n      head <span class="token operator">=</span> previous<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 遍历往下走</span>\n      previous <span class="token operator">=</span> head\n      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="奇偶链表"><a class="header-anchor" href="#奇偶链表" aria-hidden="true">#</a> 奇偶链表</h3><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是<strong>节点编号的奇偶性</strong>，而不是节点的值的奇偶性。</p><p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><p>示例 1:</p><div class="language-"><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL\n</code></pre></div><p>示例 2:</p><div class="language-"><pre><code>输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL \n输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL\n</code></pre></div><p>说明:</p><p>应当保持奇数节点和偶数节点的相对顺序。 链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">oddEvenList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> head<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> evenHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> odd <span class="token operator">=</span> head<span class="token punctuation">,</span> even <span class="token operator">=</span> evenHead<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>even <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> even<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        odd <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        even<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        even <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    odd<span class="token punctuation">.</span>next <span class="token operator">=</span> evenHead<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> head<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="回文链表"><a class="header-anchor" href="#回文链表" aria-hidden="true">#</a> 回文链表</h3><p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p><p>示例 1：</p><div class="language-"><pre><code>输入：head = [1,2,2,1]\n输出：true\n</code></pre></div><p>示例 2：</p><div class="language-"><pre><code>输入：head = [1,2]\n输出：false\n</code></pre></div><p>提示：</p><p>链表中节点数目在范围[1, 105] 内 0 &lt;= Node.val &lt;= 9</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @return {boolean}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> node <span class="token operator">=</span> head\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> bak <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> bak<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// 法2</span>\n\n<span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @return {boolean}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token keyword">const</span> vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span> \n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span> vals<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vals<span class="token punctuation">.</span>length<span class="token punctuation">,</span> j<span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> vals<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="双链表"><a class="header-anchor" href="#双链表" aria-hidden="true">#</a> 双链表</h2><ul><li>双链表结构</li><li>双链表的添加</li><li>双链表的删除</li></ul><h2 id="小结"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><h3 id="合并两个有序链表"><a class="header-anchor" href="#合并两个有序链表" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener noreferrer">合并两个有序链表</a></h3><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>示例 1：</p><p>输入：l1 = [1,2,4], l2 = [1,3,4] 输出：[1,1,2,3,4,4] 示例 2：</p><p>输入：l1 = [], l2 = [] 输出：[] 示例 3：</p><p>输入：l1 = [], l2 = [0] 输出：[0]</p><p>提示：</p><p>两个链表的节点数目范围是 [0, 50] -100 &lt;= Node.val &lt;= 100 l1 和 l2 均按 非递减顺序 排列</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> l1\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> l2\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="两数相加"><a class="header-anchor" href="#两数相加" aria-hidden="true">#</a> 两数相加</h3><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例 1：</p><p>输入：l1 = [2,4,3], l2 = [5,6,4] 输出：[7,0,8] 解释：342 + 465 = 807. 示例 2：</p><p>输入：l1 = [0], l2 = [0] 输出：[0] 示例 3：</p><p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] 输出：[8,9,9,9,0,0,0,1]</p><p>提示：</p><p>每个链表中的节点数在范围 [1, 100] 内 0 &lt;= Node.val &lt;= 9 题目数据保证列表表示的数字不含前导零</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> curr <span class="token operator">=</span> dummy\n    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">+=</span> l1<span class="token punctuation">.</span>val\n            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">+=</span> l2<span class="token punctuation">.</span>val\n            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next\n        <span class="token punctuation">}</span>\n        sum <span class="token operator">+=</span> carry\n        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>\n        carry <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\n        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="旋转链表"><a class="header-anchor" href="#旋转链表" aria-hidden="true">#</a> 旋转链表</h3><p>给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。</p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg" alt="img"></p><p>输入：head = [1,2,3,4,5], k = 2 输出：[4,5,1,2,3] 示例 2：</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg" alt="img"></p><p>输入：head = [0,1,2], k = 4 输出：[2,0,1]</p><p>提示：</p><p>链表中节点的数目在范围 [0, 500] 内 -100 &lt;= Node.val &lt;= 100 0 &lt;= k &lt;= 2 * 109</p><p>题解：</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">rotateRight</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head\n\n    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">let</span> curr <span class="token operator">=</span> head\n    <span class="token keyword">while</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next\n        n <span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 旋转次数</span>\n    <span class="token keyword">let</span> p <span class="token operator">=</span> n <span class="token operator">-</span> k <span class="token operator">%</span> n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> head\n\n    <span class="token comment">// 形成环</span>\n    curr<span class="token punctuation">.</span>next <span class="token operator">=</span> head\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next\n        p <span class="token operator">--</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> curr<span class="token punctuation">.</span>next\n    <span class="token comment">// 断开环</span>\n    curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>\n\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',177);t.render=function(a,p,t,o,c,l){return n(),s("div",null,[e])};export default t;export{p as __pageData};
