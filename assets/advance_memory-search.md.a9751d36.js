import{o as n,c as s,d as a}from"./app.08f538b2.js";const p='{"title":"记忆化搜索算法思想","description":"","frontmatter":{},"headers":[{"level":2,"title":"题型一","slug":"题型一"}],"relativePath":"advance/memory-search.md","lastUpdated":1646561851202}',o={},t=a('<h1 id="记忆化搜索算法思想"><a class="header-anchor" href="#记忆化搜索算法思想" aria-hidden="true">#</a> 记忆化搜索算法思想</h1><p>就是递归的时候，用一个数组存取好每一个 递归项的值，这样求值的时候，O(1) 就查到了要的值。</p><p>例题推荐：</p><ul><li>509 斐波那契数</li><li>322 零钱兑换</li></ul><hr><h2 id="题型一"><a class="header-anchor" href="#题型一" aria-hidden="true">#</a> 题型一</h2><ul><li><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener noreferrer">509. 斐波那契数</a></li></ul><p>难度简单</p><p><strong>斐波那契数</strong>，通常用 <code>F(n)</code> 表示，形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><div class="language-"><pre><code>F(0) = 0，F(1) = 1\nF(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1\n</code></pre></div><p>给你 <code>n</code> ，请计算 <code>F(n)</code> 。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：4\n输出：3\n解释：F(4) = F(3) + F(2) = 2 + 1 = 3\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 30</code></li></ul><hr><ul><li><p>题解：<a href="https://leetcode-cn.com/problems/fibonacci-number/solution/4chong-jie-jue-fang-shi-du-ji-bai-liao-1-92ud/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/fibonacci-number/solution/4chong-jie-jue-fang-shi-du-ji-bai-liao-1-92ud/</a></p></li><li><p>递归法：</p></li></ul><div class="language-js"><pre><code><span class="token keyword">public</span> int <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">int n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n作者：sdwwld\n链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>fibonacci<span class="token operator">-</span>number<span class="token operator">/</span>solution<span class="token operator">/</span><span class="token number">4</span>chong<span class="token operator">-</span>jie<span class="token operator">-</span>jue<span class="token operator">-</span>fang<span class="token operator">-</span>shi<span class="token operator">-</span>du<span class="token operator">-</span>ji<span class="token operator">-</span>bai<span class="token operator">-</span>liao<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">92</span>ud<span class="token operator">/</span>\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n</code></pre></div><ul><li>记忆化搜索</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">memorySearch</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> map<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">memorySearch</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token function">memorySearch</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token function">memorySearch</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> first <span class="token operator">+</span> second\n\n    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener noreferrer">322. 零钱兑换</a></li></ul><p>难度中等</p><p>给定不同面额的硬币 <code>coins</code> 和一个总金额 <code>amount</code>。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code>。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：coins = [1, 2, 5], amount = 11\n输出：3 \n解释：11 = 5 + 5 + 1\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：coins = [2], amount = 3\n输出：-1\n</code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><pre><code>输入：coins = [1], amount = 0\n输出：0\n</code></pre></div><p><strong>示例 4：</strong></p><div class="language-"><pre><code>输入：coins = [1], amount = 1\n输出：1\n</code></pre></div><p><strong>示例 5：</strong></p><div class="language-"><pre><code>输入：coins = [1], amount = 2\n输出：2\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= amount &lt;= 104</code></li></ul><hr><ul><li><p>题解：<a href="https://leetcode-cn.com/problems/coin-change/solution/javadi-gui-ji-yi-hua-sou-suo-dong-tai-gui-hua-by-s/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/coin-change/solution/javadi-gui-ji-yi-hua-sou-suo-dong-tai-gui-hua-by-s/</a></p></li><li><p>记忆化搜索方法</p></li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> memo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>coins<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n\n    memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token function">findWay</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> memo<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// memo[n] 表示钱币n可以被换取的最少的硬币数，不能换取就为-1</span>\n<span class="token comment">// findWay 函数的目的是为了找到 amount 数量的零钱可以兑换的最少硬币数量，返回其值</span>\n<span class="token keyword">function</span> <span class="token function">findWay</span><span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> memo<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n\t<span class="token comment">// 记忆化的处理，memo[n]用赋予了值，就不用继续下面的循环</span>\n    <span class="token comment">// 直接的返回memo[n] 的最优值</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>amount <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>amount <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">Infinity</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">findWay</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> memo<span class="token punctuation">,</span> amount <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            min <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment">// 加1，是为了加上得到res结果的那个步骤中，兑换的一个硬币</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    memo<span class="token punctuation">[</span>amount <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> min <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> min\n    \n    <span class="token keyword">return</span> memo<span class="token punctuation">[</span>amount <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div>',43);o.render=function(a,p,o,e,c,l){return n(),s("div",null,[t])};export default o;export{p as __pageData};
