import{o as n,c as s,a}from"./app.7a265b72.js";const p='{"title":"题型一","description":"","frontmatter":{},"headers":[{"level":2,"title":"题型一","slug":"题型一"},{"level":3,"title":"78. 子集","slug":"_78-子集"},{"level":3,"title":"938. 二叉搜索树的范围和","slug":"_938-二叉搜索树的范围和"},{"level":3,"title":"200. 岛屿数量","slug":"_200-岛屿数量"}],"relativePath":"advance/dfs.md","lastUpdated":1632994968273}',t={},o=a('<p>核心思想：不撞南墙不回头，一条路走到底；</p><p>DFS 和 回溯算法的区别：</p><ul><li>回溯：DFS + 剪枝，按条件走，比如从2 开始，那么到 3 的时候，则不会再从 1 开始</li></ul><p>例题：</p><ul><li>78 子集</li><li>938</li><li>200：超级经典的题目</li></ul><hr><h2 id="题型一"><a class="header-anchor" href="#题型一" aria-hidden="true">#</a> 题型一</h2><h3 id="_78-子集"><a class="header-anchor" href="#_78-子集" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener noreferrer">78. 子集</a></h3><p>难度中等</p><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：nums = [1,2,3]\n输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：nums = [0]\n输出：[[],[0]]\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><hr><ul><li>方法：</li><li>题解：</li><li>说明：</li><li>代码：</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @return {number[][]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">subsets</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">dfs</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> result<span class="token punctuation">,</span> index<span class="token punctuation">,</span> sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> index<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sub<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> result<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            sub<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_938-二叉搜索树的范围和"><a class="header-anchor" href="#_938-二叉搜索树的范围和" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/range-sum-of-bst/" target="_blank" rel="noopener noreferrer">938. 二叉搜索树的范围和</a></h3><p>难度简单163收藏分享切换为英文接收动态反馈</p><p>给定二叉搜索树的根结点 <code>root</code>，返回值位于范围 <em><code>[low, high]</code></em> 之间的所有结点的值的和。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg" alt="img"></p><div class="language-"><pre><code>输入：root = [10,5,15,3,7,null,18], low = 7, high = 15\n输出：32\n</code></pre></div><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg" alt="img"></p><div class="language-"><pre><code>输入：root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\n输出：23\n</code></pre></div><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[1, 2 * 104]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 105</code></li><li><code>1 &lt;= low &lt;= high &lt;= 105</code></li><li>所有 <code>Node.val</code> <strong>互不相同</strong></li></ul><hr><ul><li><p>视频：<a href="https://www.bilibili.com/video/BV1sy4y1q79M?p=68" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1sy4y1q79M?p=68</a></p></li><li><p>题解：<a href="https://mp.weixin.qq.com/s/xacaZccuNg6we9ss_vbfmw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/xacaZccuNg6we9ss_vbfmw</a></p></li><li><p>DFS</p></li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */</span>\n<span class="token comment">/**\n * @param {TreeNode} root\n * @param {number} low\n * @param {number} high\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">rangeSumBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">const</span> leftSum <span class="token operator">=</span> <span class="token function">rangeSumBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> rightSum <span class="token operator">=</span> <span class="token function">rangeSumBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>\n\n    total <span class="token operator">=</span> leftSum <span class="token operator">+</span> rightSum\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> low <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> total <span class="token operator">+=</span> root<span class="token punctuation">.</span>val\n\n    <span class="token keyword">return</span> total\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>BFS</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */</span>\n<span class="token comment">/**\n * @param {TreeNode} root\n * @param {number} low\n * @param {number} high\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">rangeSumBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n    \n    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n\n    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n\n    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">let</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span>length\n       <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">const</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> low <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> result <span class="token operator">+=</span> cur<span class="token punctuation">.</span>val\n         \n         <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n\n         len <span class="token operator">-=</span> <span class="token number">1</span>\n       <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> result\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_200-岛屿数量"><a class="header-anchor" href="#_200-岛屿数量" aria-hidden="true">#</a> <a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener noreferrer">200. 岛屿数量</a></h3><p>难度中等</p><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1：</strong></p><div class="language-"><pre><code>输入：grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n输出：1\n</code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><pre><code>输入：grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n输出：3\n</code></pre></div><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 300</code></li><li><code>grid[i][j]</code> 的值为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><hr><p>视频：<a href="https://www.bilibili.com/video/BV1sy4y1q79M?p=69&amp;spm_id_from=pageDriver" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1sy4y1q79M?p=69&amp;spm_id_from=pageDriver</a></p><p>题解：<a href="https://mp.weixin.qq.com/s/it_asGIDqQBoOrzdL1j2CQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/it_asGIDqQBoOrzdL1j2CQ</a></p><ul><li>DFS</li></ul><div class="language-js"><pre><code><span class="token comment">/**\n * @param {character[][]} grid\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">numIslands</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token comment">// 行数 </span>\n    <span class="token keyword">const</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length\n    <span class="token comment">// 列数</span>\n    <span class="token keyword">const</span> col <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 遇到 &quot;1&quot; 就换成 0 ，岛屿 +1，同时 【感染】周围 4 个点都为 &quot;0&quot;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                result <span class="token operator">+=</span> <span class="token number">1</span>\n                <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> result\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">&gt;=</span> row <span class="token operator">||</span> y <span class="token operator">&gt;=</span> col <span class="token operator">||</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n    grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span>\n\n    <span class="token comment">// 四个方向上的点 </span>\n    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span>\n    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span>\n    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span>\n    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>BFS + queue</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">numIslands</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n    <span class="token comment">// 行数 </span>\n    <span class="token keyword">const</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length\n    <span class="token comment">// 列数</span>\n    <span class="token keyword">const</span> col <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 遇到 &quot;1&quot; 就换成 0 ，岛屿 +1，同时 【感染】周围 4 个点都为 &quot;0&quot;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                result <span class="token operator">+=</span> <span class="token number">1</span>\n                <span class="token comment">// 将该坐标存入 队列</span>\n                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span>\n\n                <span class="token keyword">while</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> cur <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                    <span class="token keyword">let</span> x <span class="token operator">=</span> cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n                    <span class="token keyword">let</span> y <span class="token operator">=</span> cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n                    <span class="token comment">// 上方位置的元素</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">// 把坐标加进去</span>\n                        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        grid<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> row <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        grid<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> col <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> result\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre></div><ul><li>并查集</li></ul><p>前置知识：并查集，作用 找到共同的祖先</p><ul><li>Union(x, y)：合并 x， y 为同一个祖先</li><li>Find(x)：找到 x 的祖先： x = root[x]</li></ul><p>前置知识：二维数组转换成一维数组</p><p>Eg:</p><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>坐标换算：</p><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">&gt;</span> col<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">==</span><span class="token operator">&gt;</span> 公式：x <span class="token operator">*</span> col <span class="token operator">+</span> y\n\n换成一维数组后的数字 <span class="token number">7</span> 所在位置：\n\n<span class="token function">locate</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">&gt;</span> x<span class="token operator">:</span> x <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">1</span> \n<span class="token function">locate</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">&gt;</span> y<span class="token operator">:</span> y <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">3</span>\n\n<span class="token operator">===</span><span class="token operator">&gt;</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre></div><p>Code：</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">numIslands</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token comment">// 行数 </span>\n    <span class="token keyword">const</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length\n    <span class="token comment">// 列数</span>\n    <span class="token keyword">const</span> col <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n\n    <span class="token keyword">let</span> waters <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">const</span> uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UniFind</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    waters<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">const</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> dir <span class="token keyword">of</span> directions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">const</span> x <span class="token operator">=</span> i <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                        <span class="token keyword">const</span> y <span class="token operator">=</span> j <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> row <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> col <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>x<span class="token operator">*</span>col<span class="token operator">+</span>y<span class="token punctuation">,</span> i<span class="token operator">*</span>col<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this.getCount&#39;</span><span class="token punctuation">,</span> uf<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;waters&#39;</span><span class="token punctuation">,</span> waters<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> uf<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> waters<span class="token punctuation">;</span>\n    \n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// 并查集模板</span>\n<span class="token keyword">class</span> <span class="token class-name">UniFind</span> <span class="token punctuation">{</span>\n    root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    count <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length\n        <span class="token keyword">const</span> col <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> row <span class="token operator">*</span> col\n        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> x\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token comment">// 同化操作</span>\n    <span class="token function">union</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> rootX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> rootY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootX <span class="token operator">!==</span> rootY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">=</span> rootY\n            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><hr><p>针对 200 题这种题型 使用 并查集 方法做题的模板：</p><div class="language-js"><pre><code><span class="token comment">// 并查集模板</span>\n<span class="token keyword">class</span> <span class="token class-name">UniFind</span> <span class="token punctuation">{</span>\n    root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    count <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length\n        <span class="token keyword">const</span> col <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> row <span class="token operator">*</span> col\n        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> x\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n\t<span class="token comment">// 同化操作</span>\n    <span class="token function">union</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> rootX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> rootY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootX <span class="token operator">!==</span> rootY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">=</span> rootY\n            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',67);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
